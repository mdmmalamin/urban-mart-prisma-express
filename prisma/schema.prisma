generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(uuid())
  email             String     @unique
  phone             String     @unique
  password          String
  role              UserRole   @default(CUSTOMER)
  status            UserStatus @default(ACTIVE)
  passwordChangedAt DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  admin     Admin?
  vendor    Vendor?
  customer  Customer?

  @@map("users")
}

model Admin {
  id          String   @id @default(uuid())
  userId      String   @unique
  fullName    String
  gender      Gender
  dateOfBirth DateTime
  avatar      String?
  isDeleted   Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  address   Address?

  @@map("admins")
}

model Vendor {
  id          String    @id @default(uuid())
  userId      String    @unique
  fullName    String?
  gender      Gender?
  dateOfBirth DateTime?
  avatar      String?
  isDeleted   Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  address   Address?
  shop      Shop?

  @@map("vendors")
}

model Customer {
  id          String    @id @default(uuid())
  userId      String    @unique
  fullName    String?
  gender      Gender?
  dateOfBirth DateTime?
  avatar      String?
  isDeleted   Boolean   @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  addresses Address[]

  @@map("customers")
}

model Shop {
  id          String     @id @default(uuid())
  vendorId    String     @unique
  name        String
  logo        String?
  coverImage  String?
  description String?
  status      ShopStatus @default(ACTIVE)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  vendor    Vendor      @relation(fields: [vendorId], references: [id])
  addresses Address[]
  inventory Inventory[]

  @@map("shops")
}

model Address {
  id            String        @id @default(uuid())
  fullName      String
  phone         String
  detailAddress String
  landmark      String?
  city          String
  state         String
  zip           String
  status        AddressStatus @default(HOME)
  adminId       String?       @unique
  vendorId      String?       @unique
  customerId    String?
  shopId        String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  admin     Admin?    @relation(fields: [adminId], references: [id])
  vendor    Vendor?   @relation(fields: [vendorId], references: [id])
  customer  Customer? @relation(fields: [customerId], references: [id])
  shop      Shop?     @relation(fields: [shopId], references: [id])

  @@map("addresses")
}

model Category {
  id   String  @id @default(uuid())
  name String
  icon String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("categories")
}

model Inventory {
  id                String @id @default(uuid())
  shopId            String
  sku               String @unique
  availableQuantity Int    @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  shop      Shop      @relation(fields: [shopId], references: [id])
  histories History[]
  product   Product?

  @@map("inventories")
}

model History {
  id              String      @id @default(uuid())
  inventoryId     String
  actionType      StockAction @default(INITIAL)
  quantityChanged Int         @default(0)
  lastQuantity    Int         @default(0)
  newQuantity     Int         @default(0)
  note            String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  inventory Inventory @relation(fields: [inventoryId], references: [id])

  @@map("histories")
}

model Product {
  id          String        @id @default(uuid())
  categoryId  String
  inventoryId String        @unique
  name        String
  description String?
  price       Float         @default(0)
  status      ProductStatus @default(DRAFTED)

  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  images    ProductImage[]
  category  Category       @relation(fields: [categoryId], references: [id])
  inventory Inventory      @relation(fields: [inventoryId], references: [id])

  @@map("products")
}

model ProductImage {
  id        String  @id @default(uuid())
  productId String
  url       String  @unique
  isPrimary Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])

  @@map("productImages")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  VENDOR
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

enum ShopStatus {
  ACTIVE
  INACTIVE
  BLACKLISTED
  DELETED
}

enum AddressStatus {
  HOME
  WORK
  SHOP
}

enum Gender {
  MALE
  FEMALE
}

enum StockAction {
  INITIAL
  RESTOCK
  SALE
  RETURN
  ADJUSTMENT
}

enum ProductStatus {
  DRAFTED
  PUBLISHED
  UNLISTED
}
